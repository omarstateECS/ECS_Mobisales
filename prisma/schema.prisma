generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Customer {
  customerId        Int             @id @default(autoincrement())
  name      String
  industry  String?
  address   String
  latitude  Float
  longitude Float
  phone     String?
  createdAt String
  invoices  InvoiceHeader[]
  visits    Visit[]

  @@index([name])
  @@index([industry])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([name, industry])
  @@index([createdAt, customerId])
  @@index([name, createdAt])
  @@map("customers")
}

model Product {
  prodId         Int          @id @default(autoincrement())
  name           String
  category       String
  stock          Int
  nonSellableQty Int
  baseUom        String
  basePrice      Float
  units          ProductUOM[]

  @@index([category])
  @@index([baseUom])
}

model ProductUOM {
  prodId  Int
  uom     String  @db.VarChar(3)
  uomName String
  barcode String  @unique
  num     Int
  denum   Int
  product Product @relation(fields: [prodId], references: [prodId], onDelete: Cascade)

  @@id([prodId, uom])
  @@map("prod_uom")
}

model Salesman {
  salesId          Int                 @id @default(autoincrement())
  name        String
  phone       String              @unique
  address     String
  status      SalesmanStatus      @default(INACTIVE)
  password    String
  deviceId    String
  available   Boolean             @default(true)
  lastJourneyId Int               @default(0)
  createdAt   String
  isInitial   Boolean             @default(true)
  invoices    InvoiceHeader[]
  journies    Journies[]
  authorities SalesmanAuthority[]
  visits      Visit[]
}

model Authority {
  authorityId        Int                 @id @default(autoincrement())
  name      String              @unique
  type      AuthorityType
  createdAt String
  updatedAt String
  salesmen  SalesmanAuthority[]

  @@index([name])
  @@index([type])
  @@index([createdAt])
  @@map("authorities")
}

model SalesmanAuthority {
  id          Int       @id @default(autoincrement())
  salesmanId  Int
  authorityId Int
  createdAt   String
  value       Boolean   @default(true)
  authority   Authority @relation(fields: [authorityId], references: [authorityId], onDelete: Cascade)
  salesman    Salesman  @relation(fields: [salesmanId], references: [salesId], onDelete: Cascade)

  @@unique([salesmanId, authorityId])
  @@index([salesmanId])
  @@index([authorityId])
  @@index([createdAt])
  @@map("salesman_authorities")
}

model Visit {
  visitId         Int         @default(autoincrement())
  custId     Int
  salesId    Int
  journeyId  Int
  startTime  String?
  endTime    String?
  cancelTime String?
  status     VisitStatus @default(WAIT)
  createdAt  String
  updatedAt  String
  customer   Customer    @relation(fields: [custId], references: [customerId], onDelete: Cascade)
  salesman   Salesman    @relation(fields: [salesId], references: [salesId], onDelete: Cascade)
  journey    Journies    @relation("VisitToJourney", fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  actionDetails actionDetails[]
  invoices   InvoiceHeader[]

  @@id([visitId, salesId, journeyId])

  @@index([custId])
  @@index([salesId])
  @@index([status])
  @@index([startTime])
  @@index([createdAt])
  @@index([custId, salesId])
  @@index([status, createdAt])
  @@map("visits")
}

model InvoiceHeader {
  invId          String        
  custId         Int
  salesId        Int
  journeyId      Int
  visitId        Int
  createdAt      String
  updatedAt      String
  invType        InvoiceType
  reasonId       Int?
  netAmt         Float
  taxAmt         Float
  disAmt         Float
  totalAmt       Float
  paymentMethod  PaymentMethod
  currency       String
  invRef         String
  customer       Customer      @relation(fields: [custId], references: [customerId], onDelete: Cascade)
  salesman       Salesman      @relation(fields: [salesId], references: [salesId], onDelete: Cascade)
  journey        Journies      @relation("InvoiceToJourney", fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  reason         Reasons?      @relation("InvoiceHeaderReason", fields: [reasonId], references: [reasonId], onDelete: Cascade)
  visit          Visit         @relation(fields: [visitId, salesId, journeyId], references: [visitId, salesId, journeyId], onDelete: Cascade)

  @@id([invId, salesId])
}

model InvoiceItem {
  qty             Int
  disAmt          Float
  invoiceHeaderId String
  invItem         Int
  netAmt          Float
  productId       Int
  productUom      String
  reasonId        Int?
  taxAmt          Float
  totAmt          Float
  reason          Reasons?      @relation("InvoiceItemReason", fields: [reasonId], references: [reasonId], onDelete: Cascade)

  @@id([invoiceHeaderId, invItem], map: "invoice_items_pkey")
}

model Reasons {
  reasonId             Int             @id @default(autoincrement())
  description    String
  sellable       Boolean
  isHeader       Boolean
  createdAt      String
  updatedAt      String
  invoiceHeaders InvoiceHeader[] @relation("InvoiceHeaderReason")
  invoiceItems   InvoiceItem[]   @relation("InvoiceItemReason")
}

model Journies {
  journeyId    Int
  salesId      Int
  startJourney String?
  endJourney   String?
  createdAt    String
  updatedAt    String
  salesman     Salesman  @relation(fields: [salesId], references: [salesId], onDelete: Cascade)

  visits       Visit[]         @relation("VisitToJourney")
  invoiceHeaders InvoiceHeader[] @relation("InvoiceToJourney")


  @@id([journeyId, salesId])
}


model Settings {
  settingId      Int      @id @default(autoincrement())
  name           String   @unique
  value          Boolean  @default(false)
  textValue      String?
  createdAt      String
  updatedAt      String

  @@map("settings")
}

model actionDetails {
  id              Int 
  journeyId       Int
  visitId         Int
  salesId         Int
  actionId        Int
  createdAt       String
  
  visit           Visit    @relation(fields: [visitId, salesId, journeyId], references: [visitId, salesId, journeyId], onDelete: Cascade)
  action          actions  @relation(fields: [actionId], references: [actionId], onDelete: Cascade)

  @@id([id, journeyId, visitId])
  @@map("action_details")
}

model actions {
  actionId        Int @id @default(autoincrement())
  name            String
  createdAt       String
  actionDetails   actionDetails[]

  @@map("actions")
}



enum UnitType {
  PIECE
  BOX
  CARTON
}

enum SalesmanStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum PaymentMethod {
  CASH
  CARD
  CREDIT
}

enum InvoiceType {
  SALE
  RETURN
  EXCHANGE
}

enum AuthorityType {
  WEB
  MOBILE
}

enum VisitStatus {
  START
  END
  WAIT
  CANCEL
}
