generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Customer {
  id        Int             @id @default(autoincrement())
  name      String
  industry  String?
  address   String
  latitude  Float
  longitude Float
  phone     String?
  createdAt DateTime        @default(now())
  invoices  InvoiceHeader[]
  visits    Visit[]

  @@index([name])
  @@index([industry])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([name, industry])
  @@index([createdAt, id])
  @@index([name, createdAt])
  @@map("customers")
}

model Product {
  prodId         Int          @id @default(autoincrement())
  name           String
  category       String
  stock          Int
  nonSellableQty Int
  baseUom        String
  basePrice      Float
  units          ProductUOM[]

  @@index([category])
  @@index([baseUom])
}

model ProductUOM {
  prodId  Int
  uom     String  @db.VarChar(3)
  uomName String
  barcode String  @unique
  num     Int
  denum   Int
  product Product @relation(fields: [prodId], references: [prodId], onDelete: Cascade)

  @@id([prodId, uom])
  @@map("prod_uom")
}

model Salesman {
  name        String
  phone       String              @unique
  address     String
  status      SalesmanStatus      @default(INACTIVE)
  password    String
  deviceId    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  id          Int                 @id @default(autoincrement())
  isInitial   Boolean             @default(true)
  invoices    InvoiceHeader[]
  journies    Journies[]
  authorities SalesmanAuthority[]
  visits      Visit[]
}

model Authority {
  id        Int                 @id @default(autoincrement())
  name      String              @unique
  type      AuthorityType
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  salesmen  SalesmanAuthority[]

  @@index([name])
  @@index([type])
  @@index([createdAt])
  @@map("authorities")
}

model SalesmanAuthority {
  id          Int       @id @default(autoincrement())
  salesmanId  Int
  authorityId Int
  createdAt   DateTime  @default(now())
  value       Boolean   @default(true)
  authority   Authority @relation(fields: [authorityId], references: [id], onDelete: Cascade)
  salesman    Salesman  @relation(fields: [salesmanId], references: [id], onDelete: Cascade)

  @@unique([salesmanId, authorityId])
  @@index([salesmanId])
  @@index([authorityId])
  @@index([createdAt])
  @@map("salesman_authorities")
}

model Visit {
  id         Int         @id @default(autoincrement())
  custId     Int
  salesId    Int
  startTime  DateTime?
  endTime    DateTime?
  cancelTime DateTime?
  status     VisitStatus @default(WAIT)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  customer   Customer    @relation(fields: [custId], references: [id], onDelete: Cascade)
  salesman   Salesman    @relation(fields: [salesId], references: [id], onDelete: Cascade)

  @@index([custId])
  @@index([salesId])
  @@index([status])
  @@index([startTime])
  @@index([createdAt])
  @@index([custId, salesId])
  @@index([status, createdAt])
  @@map("visits")
}

model InvoiceHeader {
  invId          Int           
  custId         Int
  salesId        Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  inv_type       InvoiceType
  reason_id      Int
  net_amt        Float
  tax_amt        Float
  dis_amt        Float
  total_amt      Float
  payment_method PaymentMethod
  currency       String
  inv_ref        Int
  customer       Customer      @relation(fields: [custId], references: [id], onDelete: Cascade)
  salesman       Salesman      @relation(fields: [salesId], references: [id], onDelete: Cascade)

  @@id([invId, salesId])
}

model Reasons {
  id          Int      @id @default(autoincrement())
  description String
  sellable    Boolean
  isHeader    Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Journies {
  id           Int       @id @default(autoincrement())
  salesId      Int
  startJourney DateTime?
  endJourney   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  salesman     Salesman  @relation(fields: [salesId], references: [id], onDelete: Cascade)
}

model InvoiceItem {
  qty             Decimal
  disAmt          Decimal
  invoiceHeaderId Int
  invoiceItem     Int
  netAmt          Decimal
  productId       Int
  productUom      String
  reasonId        Int
  taxAmt          Decimal
  totAmt          Decimal

  @@id([invoiceHeaderId, invoiceItem], map: "invoice_items_pkey")
}

enum UnitType {
  PIECE
  BOX
  CARTON
}

enum SalesmanStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum PaymentMethod {
  CASH
  CARD
  CREDIT
}

enum InvoiceType {
  SALE
  RETURN
  EXCHANGE
}

enum AuthorityType {
  WEB
  MOBILE
}

enum VisitStatus {
  START
  END
  WAIT
  CANCEL
}
