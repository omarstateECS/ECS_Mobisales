generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model Customer {
  customerId        Int             @id @default(autoincrement())
  name      String
  industry  String?
  address   String
  latitude  Float
  longitude Float
  phone     String?
  regionId  Int?
  blocked   Boolean @default(false)
  isActive  Boolean @default(true)
  createdAt String
  region    Region?         @relation(fields: [regionId], references: [id], onDelete: SetNull)
  invoices  InvoiceHeader[]
  visits    Visit[]

  @@index([name])
  @@index([industry])
  @@index([createdAt])
  @@index([latitude, longitude])
  @@index([name, industry])
  @@index([createdAt, customerId])
  @@index([name, createdAt])
  @@index([regionId])
  @@map("customers")
}

model Product {
  prodId         Int          @id @default(autoincrement())
  name           String
  category       String
  stock          Int
  nonSellableQty Int
  baseUom        String
  basePrice      Decimal      @db.Decimal(18, 5)
  units          ProductUOM[]
  fillupItems    FillupItem[]
  loadOrders     loadOrders[]

  @@index([category])
  @@index([baseUom])
}

model ProductUOM {
  prodId  Int
  uom     String  @db.VarChar(3)
  uomName String
  barcode String  @unique
  num     Int
  denum   Int
  product Product @relation(fields: [prodId], references: [prodId], onDelete: Cascade)

  @@id([prodId, uom])
  @@map("prod_uom")
}

model Salesman {
  salesId          Int                 @id @default(autoincrement())
  name        String
  phone       String              @unique
  address     String
  status      SalesmanStatus      @default(INACTIVE)
  password    String
  deviceId    String
  available   Boolean             @default(true)
  lastJourneyId Int               @default(0)
  regionId    Int?
  createdAt   String
  isInitial   Boolean             @default(true)
  region      Region?             @relation(fields: [regionId], references: [id], onDelete: SetNull)
  invoices    InvoiceHeader[]
  journies    Journies[]
  authorities SalesmanAuthority[]
  visits      Visit[]

  @@index([regionId])
}

model Authority {
  authorityId        Int                 @id @default(autoincrement())
  name      String              @unique
  type      AuthorityType
  createdAt String
  updatedAt String
  salesmen  SalesmanAuthority[]

  @@index([name])
  @@index([type])
  @@index([createdAt])
  @@map("authorities")
}

model SalesmanAuthority {
  id          Int       @id @default(autoincrement())
  salesmanId  Int
  authorityId Int
  createdAt   String
  value       Boolean   @default(true)
  authority   Authority @relation(fields: [authorityId], references: [authorityId], onDelete: Cascade)
  salesman    Salesman  @relation(fields: [salesmanId], references: [salesId], onDelete: Cascade)

  @@unique([salesmanId, authorityId])
  @@index([salesmanId])
  @@index([authorityId])
  @@index([createdAt])
  @@map("salesman_authorities")
}

model Visit {
  visitId         Int
  custId     Int
  salesId    Int
  journeyId  Int
  startTime  String?
  endTime    String?
  cancelTime String?
  status     VisitStatus @default(WAIT)
  createdAt  String
  updatedAt  String
  customer   Customer    @relation(fields: [custId], references: [customerId], onDelete: Cascade)
  salesman   Salesman    @relation(fields: [salesId], references: [salesId], onDelete: Cascade)
  journey    Journies    @relation("VisitToJourney", fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  actionDetails actionDetails[]
  invoices   InvoiceHeader[]

  @@id([visitId, salesId, journeyId])

  @@index([custId])
  @@index([salesId])
  @@index([status])
  @@index([startTime])
  @@index([createdAt])
  @@index([custId, salesId])
  @@index([status, createdAt])
  @@map("visits")
}

model InvoiceHeader {
  invId          String        
  custId         Int
  salesId        Int
  journeyId      Int
  visitId        Int
  createdAt      String
  updatedAt      String
  invType        InvoiceType
  reasonId       Int?
  netAmt         Decimal       @db.Decimal(18, 5)
  taxAmt         Decimal       @db.Decimal(18, 5)
  disAmt         Decimal       @db.Decimal(18, 5)
  totalAmt       Decimal       @db.Decimal(18, 5)
  paymentMethod  PaymentMethod
  currency       String
  invRef         String
  customer       Customer      @relation(fields: [custId], references: [customerId], onDelete: Cascade)
  salesman       Salesman      @relation(fields: [salesId], references: [salesId], onDelete: Cascade)
  journey        Journies      @relation("InvoiceToJourney", fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  reason         Reasons?      @relation("InvoiceHeaderReason", fields: [reasonId], references: [reasonId], onDelete: Cascade)
  visit          Visit         @relation(fields: [visitId, salesId, journeyId], references: [visitId, salesId, journeyId], onDelete: Cascade)

  @@id([invId, salesId])
}

model InvoiceItem {
  qty             Int
  disAmt          Decimal       @db.Decimal(18, 5)
  invoiceHeaderId String
  invItem         Int
  netAmt          Decimal       @db.Decimal(18, 5)
  productId       Int
  productUom      String
  reasonId        Int?
  taxAmt          Decimal       @db.Decimal(18, 5)
  totAmt          Decimal       @db.Decimal(18, 5)
  reason          Reasons?      @relation("InvoiceItemReason", fields: [reasonId], references: [reasonId], onDelete: Cascade)

  @@id([invoiceHeaderId, invItem], map: "invoice_items_pkey")
}

model Reasons {
  reasonId             Int             @id @default(autoincrement())
  description    String
  sellable       Boolean
  isHeader       Boolean
  createdAt      String
  updatedAt      String
  invoiceHeaders InvoiceHeader[] @relation("InvoiceHeaderReason")
  invoiceItems   InvoiceItem[]   @relation("InvoiceItemReason")
}

model Region {
  id        Int        @id @default(autoincrement())
  country   String
  city      String
  region    String
  createdAt String
  updatedAt String
  salesmen  Salesman[]
  customers Customer[]
  journeys  Journies[]

  @@index([country])
  @@index([city])
  @@index([region])
  @@index([country, city])
  @@map("regions")
}

model Journies {
  journeyId    Int
  salesId      Int
  startJourney String?
  endJourney   String?
  regionId     Int?
  createdAt    String
  updatedAt    String
  salesman     Salesman  @relation(fields: [salesId], references: [salesId], onDelete: Cascade)
  region       Region?   @relation(fields: [regionId], references: [id], onDelete: SetNull)     
  visits       Visit[]         @relation("VisitToJourney")
  invoiceHeaders InvoiceHeader[] @relation("InvoiceToJourney")
  fillups      Fillup[]
  loadOrders   loadOrders[]

  @@id([journeyId, salesId])
}

model Fillup {
  fillupId    Int            @id @default(autoincrement())
  journeyId   Int
  salesId     Int
  createdAt   String
  updatedAt   String
  status      FillupStatus   @default(PENDING)
  journey     Journies       @relation(fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  items       FillupItem[]

  @@index([journeyId, salesId])
  @@index([status])
  @@index([createdAt])
  @@map("fillups")
}

model FillupItem {
  id          Int      @id @default(autoincrement())
  fillupId    Int
  prodId      Int
  quantity    Int
  uom         String
  createdAt   String
  fillup      Fillup   @relation(fields: [fillupId], references: [fillupId], onDelete: Cascade)
  product     Product  @relation(fields: [prodId], references: [prodId], onDelete: Cascade)

  @@index([fillupId])
  @@index([prodId])
  @@map("fillup_items")
}


model Settings {
  settingId      Int      @id @default(autoincrement())
  name           String   @unique
  value          Boolean  @default(false)
  textValue      String?
  createdAt      String
  updatedAt      String

  @@map("settings")
}

model actionDetails {
  id              Int 
  journeyId       Int
  visitId         Int
  salesId         Int
  actionId        Int
  createdAt       String
  
  visit           Visit    @relation(fields: [visitId, salesId, journeyId], references: [visitId, salesId, journeyId], onDelete: Cascade)
  action          actions  @relation(fields: [actionId], references: [actionId], onDelete: Cascade)

  @@id([id, journeyId, visitId])
  @@map("action_details")
}

model actions {
  actionId        Int @id @default(autoincrement())
  name            String
  createdAt       String
  actionDetails   actionDetails[]

  @@map("actions")
}

model loadOrders {
  loadOrderId    Int
  salesId        Int
  journeyId      Int
  productId      Int
  quantity       Int
  createdAt      String
  updatedAt      String
  journey        Journies       @relation(fields: [journeyId, salesId], references: [journeyId, salesId], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [prodId], onDelete: Cascade)

  @@id([loadOrderId, journeyId])
  @@map("load_orders")
}



enum UnitType {
  PIECE
  BOX
  CARTON
}

enum SalesmanStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum PaymentMethod {
  CASH
  CARD
  CREDIT
}

enum InvoiceType {
  SALE
  RETURN
  EXCHANGE
}

enum AuthorityType {
  WEB
  MOBILE
}

enum VisitStatus {
  START
  END
  WAIT
  CANCEL
}

enum FillupStatus {
  PENDING
  COMPLETED
  CANCELLED
}
